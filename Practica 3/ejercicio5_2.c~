//gcc -m32 -O1 -fno-omit-frame-pointer peso_hamming.c -o peso_hamming
#include <stdio.h>	// para printf()
#include <stdlib.h>	// para exit()
#include <sys/time.h>	// para gettimeofday(), struct timeval

#define WSIZE 8*sizeof(int)
#define SIZE (1<<20)	// tamaÃ±o suficiente para tiempo apreciable
//int lista[SIZE];
int resultado=0;
unsigned lista[4] = {0x80000000, 0x00100000, 0x00000800, 0x00000001};
//unsigned lista[8]={0x7fffffff,0xffefffff,0xfffff7ff,0xfffffffe,0x01000024,0x00356700,0x8900ac00,0x00bd000ef};
//unsigned lista[8]={0x0,0x10204080, 0x3590ac06,0x70b0d0e0, 0xffffffff, 0x12345678, 0x9abcdef0, 0xcafebeef};

int suma2(int* array, int len){
    int  i,   res=0;
    for (i=0; i<len; i++)
    asm("add (%[a],%[i],4),%[r]	\n"
     :	[r] "+r" (res)		// output-input
     :	[i]  "r" (i),		// input
	[a]  "r" (array)
    );
    return res;
}

int suma3(int* array, int len){
    asm("mov 8(%%ebp), %%ebx	\n"  // array
"	mov 12(%%ebp), %%ecx	\n"  // len
"				\n"
"	mov $0, %%eax		\n"  // retval
"	mov $0, %%edx		\n"  // index
"bucle:				\n"
"	add (%%ebx,%%edx,4),%%eax\n"
"	inc       %%edx		\n"
"	cmp %%edx,%%ecx		\n"
"	jne bucle		\n"
     : 				// output
     : 				// input
     :	"ebx"			// clobber
    );
}

void crono(int (*func)(), char* msg){
    struct timeval tv1,tv2;	// gettimeofday() secs-usecs
    long           tv_usecs;	// y sus cuentas

    gettimeofday(&tv1,NULL);
    resultado = func(lista, SIZE);
    gettimeofday(&tv2,NULL);

    tv_usecs=(tv2.tv_sec -tv1.tv_sec )*1E6+(tv2.tv_usec-tv1.tv_usec);
    printf("resultado = %d\t", resultado);
    printf("%s:%9ld us\n", msg, tv_usecs);
}

int main(){
    int i;			// inicializar array
    //for (i=0; i<SIZE; i++)	// se queda en cache
      //  lista[i]=i;

    crono(suma3, "suma3 (bloque asm entero)");
    //printf("N*(N+1)/2 = %d\n", (SIZE-1)*(SIZE/2)); /*OF*/

    exit(0);
}
